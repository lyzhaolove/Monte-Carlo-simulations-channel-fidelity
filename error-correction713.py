import random
# 可纠正重量为1的错误算子
T = [[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
     [0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
     [0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0],
     [0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0],  # I,X1,X2,X3,X4,X5,X6,X7
     [0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0],
     [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0],
     [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0],
     [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1],                                               # Z1,Z2,Z3,Z4,Z5,Z6,Z7
     [1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0], [0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0],
     [0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0], [0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0],
     [0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0], [0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0],
     [0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1],                                                 # Y1,Y2,Y3,Y4,Y5,Y6,Y7
     [1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0],
     [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], [1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0],
     [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0],  # X1Z2,X1Z4,X1Z7,X1Z3,X1Z6,X1Z5
     [0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0], [0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0],
     [0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], [0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0],
     [0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0], [0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0], # X2Z1,X2Z4,X2Z7,X2Z3,X2Z6,X2Z5
     [0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0], [0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0],
     [0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], [0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0],
     [0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0], [0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0], # X4Z1,X4Z2,X4Z7,X4Z3,X4Z6,X4Z5
     [0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0],
     [0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0], [0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0],
     [0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0], [0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0], # X7Z1,X7Z2,X7Z4,X7Z3,X7Z6,X7Z5
     [0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0], [0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0],
     [0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0], [0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1],
     [0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0], [0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0], # X3Z1,X3Z2,X3Z4,X3Z7,X3Z6,X3Z5
     [0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0],
     [0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0], [0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1],
     [0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0], [0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0], # X6Z1,X6Z2,X6Z4,X6Z7,X6Z3,X6Z5
     [0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0],
     [0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0], [0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1],
     [0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0], [0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0]]# X5Z1,X5Z2,X5Z4,X5Z7,X5Z3,X5Z6

# Stabilizer generator稳定子g1,g2,g3,g4,g5,g6,g7
G = [[1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0], [0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0],
     [0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0],
     [0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1], [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1]]
S = []  # 稳定子群
# 把G中每个元素添加到S中
for i in range(6):
    S.append(G[i])

# 下面是两个元素的异或运算
for i in range(6):
    for j in range(i+1, 6):
        s = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
        for t in range(14):
            s[t] = G[i][t] ^ G[j][t]
        S.append(s)

# 下面是三个元素的异或运算
for i in range(6):
    for j in range(i+1, 6):
        for k in range(j+1, 6):
            s = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
            for t in range(14):
                s[t] = G[i][t] ^ G[j][t] ^ G[k][t]
            S.append(s)

# 下面是四个元素的异或运算
for i in range(6):
    for j in range(i+1, 6):
        for k in range(j+1, 6):
            for m in range(k+1, 6):
                s = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
                for t in range(14):
                    s[t] = G[i][t] ^ G[j][t] ^ G[k][t] ^ G[m][t]
                S.append(s)

# 下面是五个元素的异或运算
for i in range(6):
    for j in range(i+1, 6):
        for k in range(j+1, 6):
            for m in range(k+1, 6):
                for n in range(m+1, 6):
                    s = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
                    for t in range(14):
                        s[t] = G[i][t] ^ G[j][t] ^ G[k][t] ^ G[m][t] ^ G[n][t]
                    S.append(s)

# 下面是六个元素的异或运算
s = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
for t in range(14):
    s[t] = G[0][t] ^ G[1][t] ^ G[2][t] ^ G[3][t] ^ G[4][t] ^ G[5][t]
S.append(s)

# 添加单位元后，S中所有元素
S.append([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])
# print('S=',S)

# E=T*S
E = []
for i in range(64):
    for j in range(64):
        e = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
        for t in range(14):
            e[t] = T[i][t] ^ S[j][t]
            E.append(e)
print(len(E))
# 计算错误算子及保真度
for q in range(21):
    rate = 0.01
    rate *= q
    count = 0  # 能被纠正错误的次数
    # print("rate=", rate)
    for k in range(1000):
        D = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
        r0 = random.random()
        r1 = random.random()
        r2 = random.random()
        r3 = random.random()
        r4 = random.random()
        r5 = random.random()
        r6 = random.random()
        if r0 < rate:
            r0 = int(4 * r0 / rate)
            if r0 & 1 == 0 and r0 >> 1 == 0:
                D[0] = 0
                D[7] = 0
            elif r0 & 1 == 1 and r0 >> 1 == 0:
                D[0] = 1
                D[7] = 0
            elif r0 & 1 == 0 and r0 >> 1 == 1:
                D[0] = 0
                D[7] = 1
            elif r0 & 1 == 1 and r0 >> 1 == 1:
                D[0] = 1
                D[7] = 1
        if r1 < rate:
            r1 = int(4 * r1 / rate)
            if r1 & 1 == 0 and r1 >> 1 == 0:
                D[1] = 0
                D[8] = 0
            elif r1 & 1 == 1 and r1 >> 1 == 0:
                D[1] = 1
                D[8] = 0
            elif r1 & 1 == 0 and r1 >> 1 == 1:
                D[1] = 0
                D[8] = 1
            elif r1 & 1 == 1 and r1 >> 1 == 1:
                D[1] = 1
                D[8] = 1
        if r2 < rate:
            r2 = int(4 * r2 / rate)
            if r2 & 1 == 0 and r2 >> 1 == 0:
                D[2] = 0
                D[9] = 0
            elif r2 & 1 == 1 and r2 >> 1 == 0:
                D[2] = 1
                D[9] = 0
            elif r2 & 1 == 0 and r2 >> 1 == 1:
                D[2] = 0
                D[9] = 1
            elif r2 & 1 == 1 and r2 >> 1 == 1:
                D[2] = 1
                D[9] = 1
        if r3 < rate:
            r3 = int(4 * r3 / rate)
            if r3 & 1 == 0 and r3 >> 1 == 0:
                D[3] = 0
                D[10] = 0
            elif r3 & 1 == 1 and r3 >> 1 == 0:
                D[3] = 1
                D[10] = 0
            elif r3 & 1 == 0 and r3 >> 1 == 1:
                D[3] = 0
                D[10] = 1
            elif r3 & 1 == 1 and r3 >> 1 == 1:
                D[3] = 1
                D[10] = 1
        if r4 < rate:
            r4 = int(4 * r4 / rate)
            if r4 & 1 == 0 and r4 >> 1 == 0:
                D[4] = 0
                D[11] = 0
            elif r4 & 1 == 1 and r4 >> 1 == 0:
                D[4] = 1
                D[11] = 0
            elif r4 & 1 == 0 and r4 >> 1 == 1:
                D[4] = 0
                D[11] = 1
            elif r4 & 1 == 1 and r4 >> 1 == 1:
                D[4] = 1
                D[11] = 1
        if r5 < rate:
            r5 = int(4 * r5 / rate)
            if r5 & 1 == 0 and r5 >> 1 == 0:
                D[5] = 0
                D[12] = 0
            elif r5 & 1 == 1 and r5 >> 1 == 0:
                D[5] = 1
                D[12] = 0
            elif r5 & 1 == 0 and r5 >> 1 == 1:
                D[5] = 0
                D[12] = 1
            elif r5 & 1 == 1 and r5 >> 1 == 1:
                D[5] = 1
                D[12] = 1
        if r6 < rate:
            r6 = int(4 * r6 / rate)
            if r6 & 1 == 0 and r6 >> 1 == 0:
                D[6] = 0
                D[13] = 0
            elif r6 & 1 == 1 and r6 >> 1 == 0:
                D[6] = 1
                D[13] = 0
            elif r6 & 1 == 0 and r6 >> 1 == 1:
                D[6] = 0
                D[13] = 1
            elif r6 & 1 == 1 and r6 >> 1 == 1:
                D[6] = 1
                D[13] = 1

        if D in E:
            count += 1
    probability = count/1000
    print(probability, end=', ')
